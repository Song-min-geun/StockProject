version: '3.8'
services:
  # --- Spring Cloud 인프라 서비스 ---
  config-server:
    image: minkeon44883/config-server:latest
    container_name: config-server
    ports:
      - "8888:8888"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - GIT_TOKEN=${GIT_TOKEN}
    networks:
      - stock-net

  eureka-server:
    image: minkeon44883/eureka-server:latest
    container_name: eureka-server
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - config-server
    networks:
      - stock-net

  gateway-server:
    image: minkeon44883/gateway-server:latest
    container_name: gateway-server
    ports:
      - "8000:8000"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - eureka-server
    networks:
      - stock-net

  # --- 백엔드 애플리케이션 서비스 ---
  user-service:
    image: minkeon44883/user-service:latest
    container_name: user-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
    depends_on:
      - gateway-server
      - db
    networks:
      - stock-net

  order-service:
    image: minkeon44883/order-service:latest
    container_name: order-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
    depends_on:
      - gateway-server
      - db
    networks:
      - stock-net

  product-service:
    image: minkeon44883/product-service:latest
    container_name: product-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - gateway-server
      - mongodb
    networks:
      - stock-net

  stock-service:
    image: minkeon44883/stock-service:latest
    container_name: stock-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - gateway-server
      - redis
    networks:
      - stock-net

  # --- 메시징 및 데이터베이스 ---
  db:
    image: mysql:8.0
    container_name: db
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_DATABASE: user_db
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - stock-net

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - stock-net

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - stock-net

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - stock-net

  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - stock-net

networks:
  stock-net:

volumes:
  mysql_data:
  mongodb_data: