# .github/workflows/deploy.yml

name: CI/CD - Build, Push, and Deploy

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      # 1. 소스 코드 가져오기
      - name: Checkout source code
        uses: actions/checkout@v3

      # 2. Docker Hub 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 3. Docker 이미지 빌드 및 푸시 (각 서비스마다)
      # user-service 빌드
      - name: Build and push user-service
        uses: docker/build-push-action@v4
        with:
          context: .  # ⭐️ 빌드 컨텍스트를 프로젝트 전체로 변경
          file: ./stockproject-backend/user-service/Dockerfile # ⭐️ 사용할 Dockerfile을 직접 지정
          push: true
          tags: minkeon44883/user-service:latest

      # order-service 빌드
      - name: Build and push order-service
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./stockproject-backend/order-service/Dockerfile
          push: true
          tags: minkeon44883/order-service:latest

      # (product-service, stock-service 등 나머지 서비스들도 위와 같이 추가)


  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # user-service 배포
            docker pull minkeon44883/user-service:latest
            docker stop user-service || true
            docker rm user-service || true
            docker run -d --name user-service -p 8081:8081 minkeon44883/user-service:latest

            # order-service 배포
            docker pull minkeon44883/order-service:latest
            docker stop order-service || true
            docker rm order-service || true
            docker run -d --name order-service -p 8082:8082 minkeon44883/order-service:latest

            # (나머지 서비스들도 배포 스크립트 추가)

            docker image prune -f