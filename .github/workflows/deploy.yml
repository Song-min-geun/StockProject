# .github/workflows/deploy.yml

name: CI/CD - Build, Push, and Deploy All Services

on:
  push:
    branches: [ "main" ]

jobs:
  # --- 첫 번째 잡: 모든 서비스의 Docker 이미지 빌드 및 푸시 ---
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      # 1. 소스 코드 가져오기
      - name: Checkout source code
        uses: actions/checkout@v3

      # 2. Docker Hub 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 3. 각 서비스의 Docker 이미지 빌드 및 푸시
      # user-service
      - name: Build and push user-service
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./stockproject-backend/user-service/Dockerfile
          push: true
          tags: minkeon44883/user-service:latest

      # order-service
      - name: Build and push order-service
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./stockproject-backend/order-service/Dockerfile
          push: true
          tags: minkeon44883/order-service:latest

      # product-service
      - name: Build and push product-service
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./stockproject-backend/product-service/Dockerfile
          push: true
          tags: minkeon44883/product-service:latest

      # stock-service
      - name: Build and push stock-service
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./stockproject-backend/stock-service/Dockerfile
          push: true
          tags: minkeon44883/stock-service:latest

  # --- 두 번째 잡: 서버에 접속해서 모든 서비스 배포 ---
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Deploy to EC2 with Docker Compose
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # ⭐️ 1. docker-compose.yml 파일에 GIT_TOKEN 값을 주입하기 위해 .env 파일 생성
            echo "GIT_TOKEN=${{ secrets.GIT_TOKEN }}" > .env
            
            # ⭐️ 2. docker-compose.yml 파일 복사
            # 이 명령은 GitHub Actions Runner에서 EC2 서버로 파일을 전송합니다.
            scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
            docker-compose.yml .env ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USERNAME }}/
            
            # ⭐️ 3. Docker Compose로 모든 서비스 실행
            docker-compose pull # 모든 최신 이미지 받아오기
            docker-compose up -d # 모든 서비스를 백그라운드에서 실행