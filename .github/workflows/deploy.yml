name: CI/CD - Build, Push, and Deploy All Services

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 각 서비스의 Docker 이미지 빌드 및 푸시
      # user-service
      - name: Build and push user-service
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./stockproject-backend/user-service/Dockerfile
          push: true
          tags: minkeon44883/user-service:latest

      # order-service
      - name: Build and push order-service
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./stockproject-backend/order-service/Dockerfile
          push: true
          tags: minkeon44883/order-service:latest

      # product-service
      - name: Build and push product-service
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./stockproject-backend/product-service/Dockerfile
          push: true
          tags: minkeon44883/product-service:latest

      # stock-service.
      - name: Build and push stock-service
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./stockproject-backend/stock-service/Dockerfile
          push: true
          tags: minkeon44883/stock-service:latest

  # --- 두 번째 잡: 서버에 접속해서 모든 서비스 배포 ---
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to EC2 with Docker Compose
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # 1. EC2 서버에 프로젝트 폴더가 없으면 Git 저장소를 복제(clone)하고, 있으면 해당 폴더로 이동합니다.
            cd ~/stockproject || git clone https://github.com/Song-min-geun/stockproject.git ~/stockproject
            cd ~/stockproject
            
            # 2. main 브랜치의 최신 코드를 받아옵니다.
            git pull origin main
            
            # 3. .env 파일을 서버에 직접 생성합니다.
            echo "GIT_TOKEN=${{ secrets.GIT_TOKEN }}" > .env
            # (다른 시크릿들도 필요하다면 여기에 추가)
            
            # ⭐️ [수정] 'up'을 실행하기 전에, 'down' 명령어로 기존 서비스를 깨끗하게 정리합니다.
            docker-compose down
            
            # 4. Docker Compose로 모든 서비스를 실행합니다.
            docker-compose pull
            docker-compose up -d