# 워크플로우의 이름을 지정합니다.
name: User-Service CI

# 이 워크플로우가 언제 실행될지 정의합니다.
on:
  push:
    branches: [ "main" ] # main 브랜치에 코드가 push 될 때 실행
    paths:
      - 'user-service/**' # user-service 폴더 안에 변경사항이 있을 때만 실행

jobs:
  build-and-push-docker-image:
    # 이 작업이 실행될 가상 환경을 지정합니다.
    runs-on: ubuntu-latest

    steps:
      # 1. GitHub 리포지토리의 코드를 가져옵니다.
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Docker Hub에 로그인합니다. (GitHub Secrets 사용)
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 3. Docker 이미지를 빌드하고 Docker Hub에 올립니다.
      # Dockerfile 안에서 빌드가 이루어지므로, 별도의 gradle build 단계가 필요 없습니다.
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./user-service # Dockerfile이 있는 폴더
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/user-service:latest # 이미지 태그 지정